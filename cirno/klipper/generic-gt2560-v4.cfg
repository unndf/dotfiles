#This file contains common pin mappings for the Geeetech GT2560 V4.0
# board. GT2560 board uses a firmware compiled for the AVR
# atmega2560.

# See docs/Config_Reference.md for a description of parameters.

#KAMP
[exclude_object]
[include /etc/nixos/klipper/KAMP_Settings.cfg]

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0 
      
[printer]
kinematics: cartesian
max_velocity: 500
max_accel: 3500
max_z_velocity: 20
max_z_accel: 500

[bltouch]
sensor_pin: ^PC7              #^PC7 default for z_min port,  ^PE7 for Z1-
control_pin: PB5
z_offset: 2.500
x_offset: -38
y_offset: 2

[stepper_x]
step_pin: PC0
dir_pin: !PG2
enable_pin: !PC2
microsteps: 16
rotation_distance: 40
endstop_pin: !PA2
position_endstop: 0
position_max: 255
homing_speed: 30
step_pulse_duration: .000002      # In the evenuatility that the stock GEEETECH drivers starts losing steps, changing this value to .000008 migth mitigate the issue

[stepper_y]
step_pin: PC6
dir_pin: !PC4
enable_pin: !PA7
microsteps: 16
rotation_distance: 40
endstop_pin: !PA6
position_endstop: 0
position_max: 255 
homing_speed: 30
step_pulse_duration: .000002

[stepper_z]
step_pin: PA3
dir_pin: PA1
enable_pin: !PA5
microsteps: 16
rotation_distance: 8 
endstop_pin: probe: z_virtual_endstop # !PC7
#endstop_pin: !PC7
#position_endstop: 0 
#position_endstop: 0.402 
position_max: 255
position_min: -3.5
step_pulse_duration: .000002

[safe_z_home]
home_xy_position: 128, 128
speed:20
z_hop: 10
z_hop_speed: 5

[extruder]
nozzle_diameter: 0.4
filament_diameter: 1.750
heater_pin: PB4 
sensor_type: ATC Semitec 104GT-2
sensor_pin: PK3
min_temp: 5
max_temp: 300 
max_extrude_cross_section: 5
max_extrude_only_distance: 360
#min_extrude_temp: 5
control: pid
pid_kp: 24.090
pid_ki: 1.155
pid_kd: 125.569 

[extruder_stepper extruder_stepper]
extruder: extruder
step_pin: PL3
dir_pin: PL5         
enable_pin: !PB6
microsteps: 16
rotation_distance: 31.5 
pressure_advance = 0.57

[extruder_stepper extruder_stepper1]
extruder: extruder 
step_pin: PL0
dir_pin: PL2
enable_pin: !PL1
microsteps: 16
rotation_distance: 31.5 
pressure_advance = 0.57

[gcode_macro T0]
gcode:
    M163 S0 P100
    M163 S1 P0
    M164

[gcode_macro T1]
gcode:
	M163 S0 P0
    M163 S1 P100
    M164

[gcode_macro M163]  

# M163 [P<factor>] [S<index>] Set a single mix factor (in proportion to the sum total of all mix factors). The mix must be committed to a virtual tool by M164 before it takes effect.
gcode:
  {% if 'P' in params %}
     {% if 'S' in params %}
       {% set s = params.S|default(5)| int %}  
       {% if s == 1 %}
         #M118 Set Mixing factor for extruder 1 to {params.P|default(50)|float}
         SET_GCODE_VARIABLE MACRO=M164 VARIABLE=e1_percentage VALUE={params.P|default(50)|float}
       {% else %}
         SET_GCODE_VARIABLE MACRO=M164 VARIABLE=e0_percentage VALUE={params.P|default(50)|float} 
         #M118 Set Mixing factor for extruder 0 to {params.P|default(50)|float}
       {% endif %}  
     {% else %}
       SET_GCODE_VARIABLE MACRO=M164 VARIABLE=e0_percentage VALUE={params.P|default(50)|float}
       SET_GCODE_VARIABLE MACRO=M164 VARIABLE=e1_percentage VALUE={100-params.P|default(50)|float}
       #M118 Set Mixing factor to {params.P|default(50)|float} and {100-params.P|default(50)|float}
       #M118 {e0_percentage} {e1_percentage} 
     {% endif %} 
  {% else %}   
     #M118 No Mixing factor set, missing values for P and S
  {% endif %}
   
  
[gcode_macro M164]    
  variable_e0_percentage : 50 # default values
  variable_e1_percentage : 50
  
gcode:
  {% set e0 = e0_percentage / (e0_percentage + e1_percentage) | float %} # later treat the sum for all tools to 100% extrusion
  {% set e1 = e1_percentage / (e0_percentage + e1_percentage) | float %}
  #M118 Got e0 { printer.configfile.settings.extruder.rotation_distance }
  #M118 Got e1 { printer.configfile.settings['extruder_stepper extruder1'].rotation_distance  }
  #M118 Mixing factor {e0} and {e1} 
  #M118 e0 rot-dist { printer.configfile.settings.extruder.rotation_distance * e0|float }
  #M118 e1 rot-dist { printer.configfile.settings['extruder_stepper extruder1'].rotation_distance * e1|float } 
   {% if e0 == 0 %}
     # only e1
     SYNC_EXTRUDER_MOTION EXTRUDER=extruder_stepper MOTION_QUEUE= # e0 off
     SYNC_EXTRUDER_MOTION EXTRUDER=extruder_stepper1 MOTION_QUEUE=extruder # Add e1
     SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=extruder_stepper DISTANCE={ printer.configfile.settings['extruder_stepper extruder_stepper'].rotation_distance |float }
     SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=extruder_stepper1 DISTANCE={ printer.configfile.settings['extruder_stepper extruder_stepper1'].rotation_distance |float } 
   {% elif e1 == 0 %}
     # only e0
     SYNC_EXTRUDER_MOTION EXTRUDER=extruder_stepper MOTION_QUEUE=extruder # add e0 
     SYNC_EXTRUDER_MOTION EXTRUDER=extruder_stepper1 MOTION_QUEUE= # e1 off
     SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=extruder_stepper DISTANCE={ printer.configfile.settings['extruder_stepper extruder_stepper'].rotation_distance |float }
     SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=extruder_stepper1 DISTANCE={ printer.configfile.settings['extruder_stepper extruder_stepper1'].rotation_distance |float } 
   {% else %}
     # activate stepper percentages
     SYNC_EXTRUDER_MOTION EXTRUDER=extruder_stepper MOTION_QUEUE=extruder # Add e0
     SYNC_EXTRUDER_MOTION EXTRUDER=extruder_stepper1 MOTION_QUEUE=extruder # Add e1
     SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=extruder_stepper DISTANCE={ printer.configfile.settings['extruder_stepper extruder_stepper'].rotation_distance / e0 |float }
     SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=extruder_stepper1 DISTANCE={ printer.configfile.settings['extruder_stepper extruder_stepper1'].rotation_distance / e1 |float } 
   {% endif %}
  #M118 Mixing factor {e0} and {e1} activated

[gcode_macro G10]
rename_existing: G10.1
gcode:
     SYNC_EXTRUDER_MOTION EXTRUDER=extruder_stepper MOTION_QUEUE=extruder # Add e0
     SYNC_EXTRUDER_MOTION EXTRUDER=extruder_stepper1 MOTION_QUEUE=extruder # Add e1
     SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=extruder_stepper DISTANCE={ printer.configfile.settings['extruder_stepper extruder_stepper'].rotation_distance |float }
     SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=extruder_stepper1 DISTANCE={ printer.configfile.settings['extruder_stepper extruder_stepper1'].rotation_distance |float }

     #RETRACT
     G10.1
     
     #RESET
     M164

[gcode_macro G11]
rename_existing: G11.1
gcode:
     SYNC_EXTRUDER_MOTION EXTRUDER=extruder_stepper MOTION_QUEUE=extruder # Add e0
     SYNC_EXTRUDER_MOTION EXTRUDER=extruder_stepper1 MOTION_QUEUE=extruder # Add e1
     SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=extruder_stepper DISTANCE={ printer.configfile.settings['extruder_stepper extruder_stepper'].rotation_distance |float }
     SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=extruder_stepper1 DISTANCE={ printer.configfile.settings['extruder_stepper extruder_stepper1'].rotation_distance |float } 

     #UNRETACT
     G11.1

     #RESET
     M164

[heater_bed]
heater_pin: PG5
sensor_type: ATC Semitec 104GT-2
sensor_pin: PK2
min_temp: 0
max_temp: 120
control: pid
pid_kp: 69.898
pid_ki: 1.239 
pid_kd: 985.562 

[display]
lcd_type: st7920
cs_pin: PE3
sclk_pin: PD0
sid_pin: PC1
encoder_pins: ^PH0, ^PH1
click_pin: ^!PD2

[controller_fan chassis_fan]
pin: PH4

[fan]
pin: PH6

[heater_fan nozzle_fan]            
pin: PH5
heater: extruder
heater_temp: 50.0

[virtual_sdcard]
path: /var/lib/moonraker/gcodes/

[idle_timeout]
timeout: 72000

[bed_mesh]
speed: 120
horizontal_move_z: 5
mesh_min: 6, 6
mesh_max: 217,245
probe_count: 6 

[firmware_retraction]
retract_length: 1.75 
retract_speed: 35 
unretract_extra_length: 0
unretract_speed: 35 

[bed_screws]
screw1: 42, 44
screw2: 212, 44
screw3: 42, 212
screw4: 212, 212

[pause_resume]
recover_velocity: 50

#[output_pin beeper]
#pin: PD3

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true

  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}


  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL~

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####

  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91; Use relative coordinates
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}

  # TODO: unpause fan
  # SET_FAN_SPEED FAN=fan SPEED=0

  RESUME_BASE {get_params}

[gcode_macro _load_unload]
gcode:
  {% set saved_extruder = printer.toolhead.extruder %}
  {% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
  {% set km = printer["gcode_macro _km_globals"] %}
  # Use the global min as default if provided, else use per extruder min + 5.
  {% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer
                   else 0 %}
  {% set default_minimum = km.load_min_temp if km.load_min_temp else
         (printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
  {% if 'MINIMUM' in params %}
    {% set MINIMUM = params.MINIMUM|int %}
  # This is the special case for a filament change after an idle timeout.
  {% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
          printer["gcode_macro resume"].saved_extruder_temp %}
    {% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
  # Use the target temp if higher than the default.
  {% elif printer[EXTRUDER].target > default_minimum %}
    {% set MINIMUM = printer[EXTRUDER].target %}
  {% else %}
    {% set MINIMUM = default_minimum %}
  {% endif %}
  {% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
    { action_raise_error("Extrude below minimum temp.") }
  {% elif printer.pause_resume.is_paused %}
    # Clear the saved E if we're (un-)loading while paused.
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
  {% endif %}
  {% set SPEED = params.SPEED|default(km.load_speed)|int %}
  {% set priming_length = km.load_priming_length %}
  {% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
  {% if LENGTH < 0 %}
    {% set priming_length = (priming_length + LENGTH, 0)|max %}
    {% set LENGTH = 0 %}
  {% endif %}
  SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
  {% if EXTRUDER != saved_extruder%}
    ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
  {% endif %}
  _KM_PRINT_STATUS ACTION=PUSH_STATUS
  {% if not printer.extruder.can_extrude or
        printer[EXTRUDER].target < default_minimum %}
    {action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
    M109 S{MINIMUM}
  {% endif %}
  _KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"
    if params.LOAD|int else "filament_unload"}
  M83
  {% set priming_speed = (km.load_priming_speed, SPEED)|min %}
  {% if params.LOAD|int %}
    G0 E{LENGTH} F{SPEED}
    G0 E{priming_length} F{priming_speed}
    G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
  {% else %}
    {% set pre_prime_distance = 5.0 %}
    {% set shaping_moves = 5 %}
    {% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
    # Push forward to heat up, then retract to the edge of the meltzone.
    G0 E{pre_prime_distance} F{SPEED}
    G4 P500
    G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
    # Shape the tip with a pairs of short extrusions and retractions, where
    # the retractions get increasingly longer than the extrusion.
    {% for i in range(1, shaping_moves + 1) %}
      G0 E2 F{priming_speed}
      G0 E-{2 + (0.1 * i)} F{priming_speed}
    {% endfor %}
    # Retract the rest of the length.
    G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
  {% endif %}
  RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD

  # Beep on completion
  {% for i in range(BEEPS) %}
    M300 P100
    G4 P200
  {% endfor %}
  _KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

# TODO: Fix casing after front-ends get fixed
[gcode_macro LOAD_FILAMENT]
description: Loads filament to the extruder.
  Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
                       [EXTRUDER=<extruder>] [MINIMUM=<temperature>]
                       [BEEPS=<beep count on completion>]
gcode:
  _LOAD_UNLOAD LOAD=1{% for k in params
    %}{' '~k~'="'~params[k]~'"'}{% endfor %}

  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  M109
  {% set dummy = params.LENGTH|default(variable_load_length)|float %}
  {% set dummy = params.SPEED|default(variable_load_speed)|float %}
  {% set dummy = params.EXTRUDER|default(current extruder) %}
  {% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
  {% set dummy = params.BEEPS|default(10)|int %}
  " %} # End argument block for Mainsail

# TODO: Fix casing after front-ends get fixed
[gcode_macro UNLOAD_FILAMENT]
description: Unloads filament from the extruder.
  Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
                         [EXTRUDER=<extruder>] [MINIMUM=<temperature>]
                         [BEEPS=<beep count on completion>]
gcode:
  _LOAD_UNLOAD LOAD=0{% for k in params
    %}{' '~k~'="'~params[k]~'"'}{% endfor %}

  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  M109
  {% set dummy = params.LENGTH|default(variable_load_length)|float %}
  {% set dummy = params.SPEED|default(variable_load_speed)|float %}
  {% set dummy = params.EXTRUDER|default(default extruder) %}
  {% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
  {% set dummy = params.BEEPS|default(10)|int %}
  " %} # End argument block for Mainsail

[gcode_macro _pause_inner_m700]
gcode:
  {% set extruder = "extruder" ~ params.T|replace('0', '')
     if "T" in params else printer.toolhead.extruder %}
  {% if extruder != printer.toolhead.extruder%}
    ACTIVATE_EXTRUDER EXTRUDER={extruder}
  {% endif %}

  {% set z_param = (' Z="%f"' % params.Z) if 'Z' in params else "" %}

  {% if printer.idle_timeout.state|string == "Printing" %}
    PAUSE B="{0}" P=2{z_param}
  {% elif not printer.pause_resume.is_paused%}
    PARK B="{0}" P=2{z_param}
  {% endif %}

[gcode_macro m701]
description: Pauses/parks the toolhead then loads filament to the extruder.
  Usage: M701 [L<distance>] [Z<pos>] [T<extruder>]
gcode:
  {% if 'U' in params %}
    {% if not 'L' in params %}
      RESPOND TYPE=error MSG="Argument \"U\" substituted for missing \"L\"."
      {% set dummy = params.__setitem__("L", params.U) %}
    {% else %}
      RESPOND TYPE=error MSG="Invalid argument \"U\" ignored."
    {% endif %}
  {% endif %}

  _PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
  LOAD_FILAMENT BEEPS="{10}" LENGTH={
    params.L|default(printer["gcode_macro _km_globals"].load_length)|float}

[gcode_macro m702]
description: Pauses/parks the toolhead then unloads filament from the extruder.
  Usage: M702 [U<distance>] [Z<pos>] [T<extruder>]
gcode:
  {% if 'L' in params %}
    {% if not 'U' in params %}
      RESPOND TYPE=error MSG="Argument \"L\" substituted for missing \"U\"."
      {% set dummy = params.__setitem__("U", params.L) %}
    {% else %}
      RESPOND TYPE=error MSG="Invalid argument \"L\" ignored."
    {% endif %}
  {% endif %}

  _PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
  UNLOAD_FILAMENT BEEPS="{10}" LENGTH={
    params.U|default(printer["gcode_macro _km_globals"].load_length)|float}
[input_shaper]
shaper_freq_x: 32.6  # frequency for the X mark of the test model
shaper_freq_y: 41.7  # frequency for the Y mark of the test model
shaper_type: mzv 
